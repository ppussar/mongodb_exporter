// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	wrapper "github.com/ppussar/mongodb_exporter/internal/wrapper"
	mock "github.com/stretchr/testify/mock"
)

// IConnection is an autogenerated mock type for the IConnection type
type IConnection struct {
	mock.Mock
}

// Aggregate provides a mock function with given fields: ctx, db, collection, command
func (_m *IConnection) Aggregate(ctx context.Context, db string, collection string, command string) (wrapper.ICursor, error) {
	ret := _m.Called(ctx, db, collection, command)

	var r0 wrapper.ICursor
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) wrapper.ICursor); ok {
		r0 = rf(ctx, db, collection, command)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wrapper.ICursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, db, collection, command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, db, collection, command
func (_m *IConnection) Find(ctx context.Context, db string, collection string, command string) (wrapper.ICursor, error) {
	ret := _m.Called(ctx, db, collection, command)

	var r0 wrapper.ICursor
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) wrapper.ICursor); ok {
		r0 = rf(ctx, db, collection, command)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wrapper.ICursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, db, collection, command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
